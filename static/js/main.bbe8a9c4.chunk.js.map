{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","react_default","a","createElement","className","href","Counter","_this","this","getBadgeClasses","formatValue","onClick","props","onIncrement","counter","onDecrement","onDelete","id","classes","value","Component","Counters","_this$props","onReset","counters","map","src_components_counter","key","App","state","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","console","log","setState","handleDecrement","handleReset","c","handleDelete","counterID","filter","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbe8a9c4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst NavBar = ({totalCounters}) => {\r\n    return(\r\n        <nav className = \"nabvar navbar-light bg-light text-center\">\r\n            <a className = \"navbar-brand\" href=\"#\">\r\n                Navbar {\" \"}\r\n                <span className = \"btn btn-pill btn-secondary\">\r\n                    { totalCounters }\r\n                </span>\r\n            </a>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport './counter.css';\r\n\r\nclass Counter extends Component {\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <span className = {this.getBadgeClasses()}>{this.formatValue()}</span>\r\n                <button onClick = {() => this.props.onIncrement(this.props.counter)}\r\n                className = \"btn m-2 btn-secondary btn-sm\">\r\n                    +\r\n                </button>\r\n                <button onClick = {() => this.props.onDecrement(this.props.counter)}\r\n                className = \"btn m-2 btn-secondary btn-sm\">\r\n                    -\r\n                </button>\r\n                <button onClick = {() => this.props.onDelete(this.props.counter.id)}\r\n                className = \"btn m-2 btn-danger btn-sm\">\r\n                    Delete\r\n                </button>\r\n            </div>\r\n         );\r\n    }\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"btn zero m-2 btn-\";\r\n\r\n        if(this.props.counter.value === 0)\r\n        {\r\n            classes += \"warning\";\r\n        }\r\n        else if(this.props.counter.value > 0)\r\n        {\r\n            classes += \"primary\";\r\n        }\r\n        else\r\n        {\r\n            classes += \"warning\";\r\n        }\r\n\r\n        return classes;\r\n    }\r\n\r\n    formatValue() {\r\n        const { value } = this.props.counter;\r\n        return value === 0 ? '0' : value;\r\n    }\r\n}\r\n \r\nexport default Counter;","import React, { Component } from \"react\";\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n    render() {\r\n        const {onReset, counters, onDelete, onIncrement, onDecrement} = this.props;\r\n        return ( \r\n            <div>\r\n                <button onClick = {onReset} className=\"btn btn-primary btn-sm m-2\">\r\n                    Reset\r\n                </button>\r\n                {counters.map(counter => (\r\n                    <Counter\r\n                        key = {counter.id}\r\n                        onIncrement = {onIncrement}\r\n                        onDecrement = {onDecrement}\r\n                        onDelete = {onDelete}\r\n                        counter = {counter}\r\n                     />\r\n                ))}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\"; \nimport Counters from \"./components/counters\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id : 1, value: 0}, //4\n      { id : 2, value: 0},\n      { id : 3, value: 0},\n      { id : 4, value: 0},\n      { id : 5, value: 0}\n    ]\n  };\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value++;\n    console.log(counters[index]);\n    this.setState({counters});\n  };\n\n  handleDecrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    if(counters[index].value > 0)\n    {\n      counters[index].value--;\n    }\n    console.log(counters[index]);\n    this.setState({counters});\n  }\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n\n    this.setState({ counters: counters });\n  };\n\n  handleDelete = counterID => {\n    const counters = this.state.counters.filter(c => c.id !== counterID);\n    this.setState({ counters: counters });\n  };\n\n  render(){\n  return (\n    <React.Fragment>\n      <NavBar totalCounters = {this.state.counters.filter(c => c.value > 0).length} />\n      <main className = \"d-flex justify-content-center\">\n        <Counters \n          counters = {this.state.counters}\n          onReset = {this.handleReset} \n          onIncrement = {this.handleIncrement} \n          onDecrement = {this.handleDecrement}\n          onDelete = {this.handleDelete} \n          />\n      </main>\n    </React.Fragment>\n  ); \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}